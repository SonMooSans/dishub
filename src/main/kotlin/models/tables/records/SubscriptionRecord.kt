/*
 * This file is generated by jOOQ.
 */
package models.tables.records


import models.tables.Subscription

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SubscriptionRecord() : UpdatableRecordImpl<SubscriptionRecord>(Subscription.SUBSCRIPTION), Record2<Long?, Int?> {

    open var user: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var request: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Int?> = super.key() as Record2<Long?, Int?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<Long?, Int?> = super.fieldsRow() as Row2<Long?, Int?>
    override fun valuesRow(): Row2<Long?, Int?> = super.valuesRow() as Row2<Long?, Int?>
    override fun field1(): Field<Long?> = Subscription.SUBSCRIPTION.USER
    override fun field2(): Field<Int?> = Subscription.SUBSCRIPTION.REQUEST
    override fun component1(): Long? = user
    override fun component2(): Int? = request
    override fun value1(): Long? = user
    override fun value2(): Int? = request

    override fun value1(value: Long?): SubscriptionRecord {
        this.user = value
        return this
    }

    override fun value2(value: Int?): SubscriptionRecord {
        this.request = value
        return this
    }

    override fun values(value1: Long?, value2: Int?): SubscriptionRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised SubscriptionRecord
     */
    constructor(user: Long? = null, request: Int? = null): this() {
        this.user = user
        this.request = request
    }
}
