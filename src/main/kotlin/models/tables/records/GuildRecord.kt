/*
 * This file is generated by jOOQ.
 */
package models.tables.records


import models.tables.Guild

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class GuildRecord() : UpdatableRecordImpl<GuildRecord>(Guild.GUILD), Record5<Long?, Long?, Long?, Long?, Long?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var container: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var userRole: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var adminRole: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var managerRole: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Long?, Long?, Long?, Long?> = super.fieldsRow() as Row5<Long?, Long?, Long?, Long?, Long?>
    override fun valuesRow(): Row5<Long?, Long?, Long?, Long?, Long?> = super.valuesRow() as Row5<Long?, Long?, Long?, Long?, Long?>
    override fun field1(): Field<Long?> = Guild.GUILD.ID
    override fun field2(): Field<Long?> = Guild.GUILD.CONTAINER
    override fun field3(): Field<Long?> = Guild.GUILD.USER_ROLE
    override fun field4(): Field<Long?> = Guild.GUILD.ADMIN_ROLE
    override fun field5(): Field<Long?> = Guild.GUILD.MANAGER_ROLE
    override fun component1(): Long? = id
    override fun component2(): Long? = container
    override fun component3(): Long? = userRole
    override fun component4(): Long? = adminRole
    override fun component5(): Long? = managerRole
    override fun value1(): Long? = id
    override fun value2(): Long? = container
    override fun value3(): Long? = userRole
    override fun value4(): Long? = adminRole
    override fun value5(): Long? = managerRole

    override fun value1(value: Long?): GuildRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): GuildRecord {
        this.container = value
        return this
    }

    override fun value3(value: Long?): GuildRecord {
        this.userRole = value
        return this
    }

    override fun value4(value: Long?): GuildRecord {
        this.adminRole = value
        return this
    }

    override fun value5(value: Long?): GuildRecord {
        this.managerRole = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?, value5: Long?): GuildRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised GuildRecord
     */
    constructor(id: Long? = null, container: Long? = null, userRole: Long? = null, adminRole: Long? = null, managerRole: Long? = null): this() {
        this.id = id
        this.container = container
        this.userRole = userRole
        this.adminRole = adminRole
        this.managerRole = managerRole
    }
}
