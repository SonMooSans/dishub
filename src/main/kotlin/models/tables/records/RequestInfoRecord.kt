/*
 * This file is generated by jOOQ.
 */
package models.tables.records


import models.enums.State
import models.tables.RequestInfo

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RequestInfoRecord() : UpdatableRecordImpl<RequestInfoRecord>(RequestInfo.REQUEST_INFO), Record5<Long?, Int?, String?, String?, State?> {

    open var guild: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var request: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var title: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var detail: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var state: State?
        set(value): Unit = set(4, value)
        get(): State? = get(4) as State?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Int?> = super.key() as Record2<Long?, Int?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Int?, String?, String?, State?> = super.fieldsRow() as Row5<Long?, Int?, String?, String?, State?>
    override fun valuesRow(): Row5<Long?, Int?, String?, String?, State?> = super.valuesRow() as Row5<Long?, Int?, String?, String?, State?>
    override fun field1(): Field<Long?> = RequestInfo.REQUEST_INFO.GUILD
    override fun field2(): Field<Int?> = RequestInfo.REQUEST_INFO.REQUEST
    override fun field3(): Field<String?> = RequestInfo.REQUEST_INFO.TITLE
    override fun field4(): Field<String?> = RequestInfo.REQUEST_INFO.DETAIL
    override fun field5(): Field<State?> = RequestInfo.REQUEST_INFO.STATE
    override fun component1(): Long? = guild
    override fun component2(): Int? = request
    override fun component3(): String? = title
    override fun component4(): String? = detail
    override fun component5(): State? = state
    override fun value1(): Long? = guild
    override fun value2(): Int? = request
    override fun value3(): String? = title
    override fun value4(): String? = detail
    override fun value5(): State? = state

    override fun value1(value: Long?): RequestInfoRecord {
        this.guild = value
        return this
    }

    override fun value2(value: Int?): RequestInfoRecord {
        this.request = value
        return this
    }

    override fun value3(value: String?): RequestInfoRecord {
        this.title = value
        return this
    }

    override fun value4(value: String?): RequestInfoRecord {
        this.detail = value
        return this
    }

    override fun value5(value: State?): RequestInfoRecord {
        this.state = value
        return this
    }

    override fun values(value1: Long?, value2: Int?, value3: String?, value4: String?, value5: State?): RequestInfoRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised RequestInfoRecord
     */
    constructor(guild: Long? = null, request: Int? = null, title: String? = null, detail: String? = null, state: State? = null): this() {
        this.guild = guild
        this.request = request
        this.title = title
        this.detail = detail
        this.state = state
    }
}
