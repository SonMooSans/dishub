/*
 * This file is generated by jOOQ.
 */
package models.tables.records


import models.tables.Request

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RequestRecord() : UpdatableRecordImpl<RequestRecord>(Request.REQUEST), Record5<Int?, Long?, Long?, Long?, Long?> {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var guild: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var thread: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var owner: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var headerMessage: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Long?> = super.key() as Record2<Int?, Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Int?, Long?, Long?, Long?, Long?> = super.fieldsRow() as Row5<Int?, Long?, Long?, Long?, Long?>
    override fun valuesRow(): Row5<Int?, Long?, Long?, Long?, Long?> = super.valuesRow() as Row5<Int?, Long?, Long?, Long?, Long?>
    override fun field1(): Field<Int?> = Request.REQUEST.ID
    override fun field2(): Field<Long?> = Request.REQUEST.GUILD
    override fun field3(): Field<Long?> = Request.REQUEST.THREAD
    override fun field4(): Field<Long?> = Request.REQUEST.OWNER
    override fun field5(): Field<Long?> = Request.REQUEST.HEADER_MESSAGE
    override fun component1(): Int? = id
    override fun component2(): Long? = guild
    override fun component3(): Long? = thread
    override fun component4(): Long? = owner
    override fun component5(): Long? = headerMessage
    override fun value1(): Int? = id
    override fun value2(): Long? = guild
    override fun value3(): Long? = thread
    override fun value4(): Long? = owner
    override fun value5(): Long? = headerMessage

    override fun value1(value: Int?): RequestRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): RequestRecord {
        this.guild = value
        return this
    }

    override fun value3(value: Long?): RequestRecord {
        this.thread = value
        return this
    }

    override fun value4(value: Long?): RequestRecord {
        this.owner = value
        return this
    }

    override fun value5(value: Long?): RequestRecord {
        this.headerMessage = value
        return this
    }

    override fun values(value1: Int?, value2: Long?, value3: Long?, value4: Long?, value5: Long?): RequestRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised RequestRecord
     */
    constructor(id: Int? = null, guild: Long? = null, thread: Long? = null, owner: Long? = null, headerMessage: Long? = null): this() {
        this.id = id
        this.guild = guild
        this.thread = thread
        this.owner = owner
        this.headerMessage = headerMessage
    }
}
