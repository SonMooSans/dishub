/*
 * This file is generated by jOOQ.
 */
package models.tables


import java.util.function.Function

import models.Public
import models.keys.REQUEST_PK
import models.tables.records.RequestRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row5
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Request(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, RequestRecord>?,
    aliased: Table<RequestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<RequestRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.request</code>
         */
        val REQUEST: Request = Request()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RequestRecord> = RequestRecord::class.java

    /**
     * The column <code>public.request.id</code>.
     */
    val ID: TableField<RequestRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.request.guild</code>.
     */
    val GUILD: TableField<RequestRecord, Long?> = createField(DSL.name("guild"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.request.thread</code>.
     */
    val THREAD: TableField<RequestRecord, Long?> = createField(DSL.name("thread"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.request.owner</code>.
     */
    val OWNER: TableField<RequestRecord, Long?> = createField(DSL.name("owner"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.request.header_message</code>.
     */
    val HEADER_MESSAGE: TableField<RequestRecord, Long?> = createField(DSL.name("header_message"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<RequestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<RequestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.request</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.request</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.request</code> table reference
     */
    constructor(): this(DSL.name("request"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, RequestRecord>): this(Internal.createPathAlias(child, key), child, key, REQUEST, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<RequestRecord, Int?> = super.getIdentity() as Identity<RequestRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<RequestRecord> = REQUEST_PK
    override fun `as`(alias: String): Request = Request(DSL.name(alias), this)
    override fun `as`(alias: Name): Request = Request(alias, this)
    override fun `as`(alias: Table<*>): Request = Request(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Request = Request(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Request = Request(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Request = Request(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row5<Int?, Long?, Long?, Long?, Long?> = super.fieldsRow() as Row5<Int?, Long?, Long?, Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Long?, Long?, Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Long?, Long?, Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
